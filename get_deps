#!/usr/bin/env python

"""
Get and compile dependencies for HactEngine.

This script will download and compile most of the dependencies needed for
HactEngine's development. It even downloads the Qt installer for you.

Some of the dependencies are "header only" or otherwise do not require
installing, but they are downloaded as well.

There are some tools which HactEngine does not directly depend on, but are
required to compile the engine's dependencies. If these are small and simple
to compile (like GNU Readline), they are downloaded and compiled as well.
"""

# pylint: disable=C0103

import argparse
import multiprocessing
import os
import posixpath
import platform
import subprocess
import sys


print("System info")
print("===========")
print("OS name:            " + os.name)
print("Platform:           " + platform.system())
print("Linux distribution: " + platform.linux_distribution()[0])
print("CPU cores:          " + str(multiprocessing.cpu_count()))
print("")

PLATFORM_LINUX      = False
PLATFORM_OSX        = False
PLATFORM_WINDOWS    = False
PLATFORM_WINDOWS_32 = False
PLATFORM_WINDOWS_64 = False


if platform.system() == "Linux":
    print("Linux detected")
    PLATFORM_LINUX = True
    
    if platform.linux_distribution()[0] == "Ubuntu":
        print("Install these dependencies:")
        print(
            "    sudo apt-get install automake build-essential cmake curl git libtool"
        )
    elif platform.linux_distribution()[0] == "Fedora":
        print("Install these dependencies:")
        print("    sudo yum install automake cmake gcc gcc-c++ libtool")
elif platform.system() == "OS X":
    print("OS X detected")
    PLATFORM_OSX = True
    sys.exit("! OS X not supported (yet)")
elif platform.system() == "Windows":
    print("Windows detected")
    sys.exit(
        "! Native Windows not supported, please install MSYS2:\n"
        + "! https://msys2.github.io/\n"
        + "! If you already have MSYS2 installed, make sure you're running with the correct Python:\n"
        + "! /bin/python ./get-deps"
    )
elif os.name == "posix":
    print("POSIX platform detected")
    
    if "MSYS" in platform.system():
        print("MSYS2 detected")
        sys.exit(
            "! MSYS2 not supported, please install MINGW64 or MINGW32:"
            + "! pacman -S mingw-w64-x86_64-toolchain   (for 64-bit builds)\n"
            + "!   OR\n"
            + "! pacman -S mingw-w64-i686-toolchain     (for 32-bit builds)"
        )
    elif "MINGW64" in platform.system():
        print("MSYS2 + MINGW64 detected")
        PLATFORM_WINDOWS    = True
        PLATFORM_WINDOWS_64 = True
        
        print("Install these dependencies: ")
        print("    pacman -S autoconf automake diffutils git make python tar tmux unzip")
        print("    pacman -S mingw-w64-x86_64-toolchain                        (for 64-bit builds)")
        print("    pacman -S mingw-w64-x86_64-cmake mingw-w64-x86_64-libtool   (for 64-bit builds)")
        print("    pacman -S mingw-w64-i686-toolchain                          (for 32-bit builds)")
        print("    pacman -S mingw-w64-i686-cmake mingw-w64-i686-libtool       (for 32-bit builds)")
    elif "MINGW32" in platform.system():
        print("MSYS2 + MINGW32 detected")
        PLATFORM_WINDOWS    = True
        PLATFORM_WINDOWS_32 = True
        
        print("Install these dependencies: ")
        print("    pacman -S autoconf automake diffutils git make python tar tmux unzip")
        print("    pacman -S mingw-w64-x86_64-toolchain                        (for 64-bit builds)")
        print("    pacman -S mingw-w64-x86_64-cmake mingw-w64-x86_64-libtool   (for 64-bit builds)")
        print("    pacman -S mingw-w64-i686-toolchain                          (for 32-bit builds)")
        print("    pacman -S mingw-w64-i686-cmake mingw-w64-i686-libtool       (for 32-bit builds)")
    else:
        print("Unsupported POSIX platform")
        sys.exit("! Unsupported platform!")
else:
    print("Unknown platform!")
    sys.exit("! Unsupported platform!")

print("")


# Available arguments
parser = argparse.ArgumentParser("update-tools")
parser.add_argument(
    "--no-compile",
    action="store_true",
    help="Only download, do not install tools"
)

# Parse arguments
args = parser.parse_args()


# Amount of jobs to use when building
make_jobs = "-j" + str(multiprocessing.cpu_count())

# The directory containing this script
scriptDir = posixpath.dirname(posixpath.realpath(__file__))

#scriptDir = scriptDir.replace("\\", "/")
#scriptDir = scriptDir.replace("C:/", "/")

# The directory to use as the temporary directory
tempDir = scriptDir + "/temp"

if PLATFORM_WINDOWS_64:
    tempDir += "-x86_64"
elif PLATFORM_WINDOWS_32:
    tempDir += "-i686"

# Create temp directory if it doesn't exist
if not posixpath.exists(tempDir):
    os.makedirs(tempDir)


# The prefix directory
prefixDir = scriptDir + "/prefix"

if PLATFORM_WINDOWS_64:
    prefixDir += "-x86_64"
elif PLATFORM_WINDOWS_32:
    prefixDir += "-i686"

# Create prefix directory if it doesn't exist
if not posixpath.exists(prefixDir):
    os.makedirs(prefixDir)


print("Script: " + scriptDir)
print("Temp:   " + tempDir)
print("Prefix: " + prefixDir)
print("")


#sys.exit()


def GitShallowClone(url, directory):
    """
    Do a shallow Git clone.
    
    :param url:        URL to clone from.
    :param directory:  Directory to clone into (relative to temp dir).
    """
    
    command = "git clone --depth=1 --branch=master " + url + " " + directory
    
    print("        ### Running download command: " + command)
    
    # Get GNU Readline
    output = subprocess.check_output(
        command,
        cwd = tempDir,
        stderr = subprocess.STDOUT,
        shell = True
    )
    
    return output


def GetDependency(directory,
                  git = None,
                  gitLinux = None,
                  gitOsX = None,
                  gitWindows = None,
                  gitWindows32 = None,
                  gitWindows64 = None,
                  download = None,
                  downloadLinux = None,
                  downloadOsX = None,
                  downloadWindows = None,
                  downloadWindows32 = None,
                  downloadWindows64 = None,
                  compile = None,
                  compileLinux = None,
                  compileOsX = None,
                  compileWindows = None,
                  compileWindows32 = None,
                  compileWindows64 = None):
    """
    Get dependency.
    """
    
    if posixpath.exists(tempDir + "/" + directory):
        print("### Skipping " + directory + " because directory exists: " + tempDir + "/" + directory)
    else:
        print("### " + directory)
        
        if PLATFORM_LINUX and gitLinux:
            print("    ### Download Linux " + directory)
            GitShallowClone(gitLinux, directory)
        elif PLATFORM_OSX and gitOsX:
            print("    ### Download OS X " + directory)
            GitShallowClone(gitOsX, directory)
        elif PLATFORM_WINDOWS_64 and gitWindows64:
            print("    ### Download Windows 64-bit " + directory)
            GitShallowClone(gitWindows64, directory)
        elif PLATFORM_WINDOWS_32 and gitWindows32:
            print("    ### Download Windows 32-bit" + directory)
            GitShallowClone(gitWindows32, directory)
        elif PLATFORM_WINDOWS and gitWindows:
            print("    ### Download Windows " + directory)
            GitShallowClone(gitWindows, directory)
        elif git:
            print("    ### Download " + directory)
            GitShallowClone(git, directory)
        
        if downloadLinux and PLATFORM_LINUX:
            print("    ### Download Linux " + directory)
            
            for command in downloadLinux:
                print("        ### Running Linux download command: " + command)
                
                subprocess.check_output(
                    command,
                    cwd = tempDir,
                    shell = True
                )
        elif downloadOsX and PLATFORM_OSX:
            print("    ### Download OS X" + directory)
            
            for command in downloadOsX:
                print("        ### Running OS X download command: " + command)
                
                subprocess.check_output(
                    command,
                    cwd = tempDir,
                    shell = True
                )
        elif downloadWindows64 and PLATFORM_WINDOWS_64:
            print("    ### Download Windows 64-bit " + directory)
            
            for command in downloadWindows64:
                print("        ### Running Windows 64-bit download command: " + command)
                
                subprocess.check_output(
                    command,
                    cwd = tempDir,
                    shell = True
                )
        elif downloadWindows32 and PLATFORM_WINDOWS_32:
            print("    ### Download Windows 32-bit " + directory)
            
            for command in downloadWindows32:
                print("        ### Running Windows 32-bit download command: " + command)
                
                subprocess.check_output(
                    command,
                    cwd = tempDir,
                    shell = True
                )
        elif downloadWindows and PLATFORM_WINDOWS:
            print("    ### Download Windows " + directory)
            
            for command in downloadWindows:
                print("        ### Running Windows download command: " + command)
                
                subprocess.check_output(
                    command,
                    cwd = tempDir,
                    shell = True
                )
        elif download:
            print("    ### Download " + directory)
            
            for command in download:
                print("        ### Running download command: " + command)
                
                subprocess.check_output(
                    command,
                    cwd = tempDir,
                    shell = True
                )
        
        if not args.no_compile:
            if compileLinux and PLATFORM_LINUX:
                print("    ### Compile " + directory)
                
                for command in compileLinux:
                    print("        ### Running Linux compile command: " + command)
                    
                    subprocess.check_output(
                        command,
                        cwd = tempDir + "/" + directory,
                        shell = True
                    )
            elif compileOsX and PLATFORM_OSX:
                print("    ### Compile " + directory)
                
                for command in compileOsX:
                    print("        ### Running OS X compile command: " + command)
                    
                    subprocess.check_output(
                        command,
                        cwd = tempDir + "/" + directory,
                        shell = True
                    )
            elif compileWindows64 and PLATFORM_WINDOWS_64:
                print("    ### Compile " + directory)
                
                for command in compileWindows64:
                    print("        ### Running Windows 64-bit compile command: " + command)
                    
                    subprocess.check_output(
                        command,
                        cwd = tempDir + "/" + directory,
                        shell = True
                    )
            elif compileWindows32 and PLATFORM_WINDOWS_32:
                print("    ### Compile " + directory)
                
                for command in compileWindows32:
                    print("        ### Running Windows 32-bit compile command: " + command)
                    
                    subprocess.check_output(
                        command,
                        cwd = tempDir + "/" + directory,
                        shell = True
                    )
            elif compileWindows and PLATFORM_WINDOWS:
                print("    ### Compile " + directory)
                
                for command in compileWindows:
                    print("        ### Running Windows compile command: " + command)
                    
                    subprocess.check_output(
                        command,
                        cwd = tempDir + "/" + directory,
                        shell = True
                    )
            elif compile:
                print("    ### Compile " + directory)
                
                for command in compile:
                    print("        ### Running compile command: " + command)
                    
                    subprocess.check_output(
                        command,
                        cwd = tempDir + "/" + directory,
                        shell = True
                    )
    
    print("")


# Get Premake (binaries only)
GetDependency(
    "premake-5.0.0-alpha5",
    downloadLinux = [
        "curl -sLo premake-5.0.0-alpha5.tar.gz "
        + "https://github.com/premake/premake-core/releases/download/v5.0.0-alpha5/premake-5.0.0-alpha5-linux.tar.gz",
        "tar xf premake-5.0.0-alpha5.tar.gz"
    ],
    downloadOsX = [
        "curl -sLo premake-5.0.0-alpha5.tar.gz "
        + "https://github.com/premake/premake-core/releases/download/v5.0.0-alpha5/premake-5.0.0-alpha5-macosx.tar.gz",
        "tar xf premake-5.0.0-alpha5.tar.gz"
    ],
    downloadWindows = [
        "curl -sLo premake-5.0.0-alpha5.zip "
        + "https://github.com/premake/premake-core/releases/download/v5.0.0-alpha5/premake-5.0.0-alpha5-windows.zip",
        "unzip -o premake-5.0.0-alpha5.zip"
    ]
)


# Get GLEW (source only)
GetDependency(
    "glew-1.13.0",
    download = [
        "curl -sLO https://sourceforge.net/projects/glew/files/glew/1.13.0/glew-1.13.0.tgz",
        "tar xf glew-1.13.0.tgz"
    ]
)


# Get and compile Termcap (needed by GNU Readline, needed by Lua)
GetDependency(
    "termcap-1.3.1",
    downloadLinux = [
        "curl -sLO http://ftp.gnu.org/gnu/termcap/termcap-1.3.1.tar.gz",
        "tar xf termcap-1.3.1.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile GNU Readline (for Lua)
GetDependency(
    "readline",
    gitLinux = "git://git.savannah.gnu.org/readline.git",
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile Lua
GetDependency(
    "lua-5.3.1",
    download = [
        "curl -sLO http://www.lua.org/ftp/lua-5.3.1.tar.gz",
        "tar xf lua-5.3.1.tar.gz"
    ],
    compileLinux = [
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "LIBRARY_PATH=\"$LIBRARY_PATH:" + prefixDir + "/lib/\" "
        + "LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:" + prefixDir + "/lib\" "
        + "C_INCLUDE_PATH=\"$C_INCLUDE_PATH:" + prefixDir + "/include\" "
        + "make " + make_jobs + " linux MYLIBS=-ltermcap",
        "make install INSTALL_TOP=\"" + prefixDir + "\""
    ],
    compileWindows = [
        "make mingw",
        "make install INSTALL_TOP=\"" + prefixDir + "\"",
        "cp src/lua53.dll " + prefixDir + "/bin/"
    ]
    # Alternative version, if the above doesn't work
    #compileWindows = [
    #    "cd src; "
    #    + "make "
    #    + "LUA_A=lua53.dll "
    #    + "LUA_T=lua.exe "
    #    + "AR=\"gcc -shared -o\" "
    #    + "RANLIB=\"strip --strip-unneeded\" "
    #    + "MYCFLAGS=\"-DLUA_DL_DLL -DLUA_BUILD_AS_DLL\" "
    #    + "MYLIBS= "
    #    + "MYLDFLAGS=-s "
    #    + "lua.exe; "
    #    + "make "
    #    + "LUAC_T=luac.exe "
    #    + "luac.exe",
    #    "cd src; "
    #    + "mkdir -p " + prefixDir + "/bin/ " + prefixDir + "/lib/; "
    #    + "cp lua.exe " + prefixDir + "/bin/; "
    #    + "cp luac.exe " + prefixDir + "/bin/; "
    #    + "cp lua53.dll " + prefixDir + "/bin/; "
    #    + "cp liblua.a " + prefixDir + "/lib/"
    #]
)


# Get and compile Luacheck
GetDependency(
    "luacheck",
    git = "https://github.com/mpeterv/luacheck.git",
    compile = [
        "PATH=\"" + prefixDir + "/bin:$PATH\" ./install.lua " + prefixDir
    ]
)


# Get GLM
GetDependency(
    "GLM",
    git = "https://github.com/g-truc/glm.git"
)


# Get RapidXML
GetDependency(
    "rapidxml-1.13",
    download = [
        "curl -sLO http://downloads.sourceforge.net/project/rapidxml/rapidxml/rapidxml%201.13/rapidxml-1.13.zip",
        "unzip -o rapidxml-1.13.zip"
    ]
)


# Get utf8cpp
GetDependency(
    "utf8cpp",
    download = [
        "curl -sLO http://downloads.sourceforge.net/project/utfcpp/utf8cpp_2x/Release%202.3.4/utf8_v2_3_4.zip",
        "unzip -o utf8_v2_3_4.zip -d utf8cpp"
    ]
)


# Get and compile FreeType
GetDependency(
    "freetype-2.6",
    download = [
        "curl -sLO http://download.savannah.gnu.org/releases/freetype/freetype-2.6.tar.gz",
        "tar xf freetype-2.6.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# Get and compile libogg
GetDependency(
    "libogg-1.3.2",
    download = [
        "curl -sLO http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gz",
        "tar xf libogg-1.3.2.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile libvorbis
GetDependency(
    "libvorbis-1.3.5",
    download = [
        "curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.5.tar.gz",
        "tar xf libvorbis-1.3.5.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# Get and compile OpenAL Soft
GetDependency(
    "openal-soft",
    git = "http://repo.or.cz/openal-soft.git",
    compileLinux = [
        "cd build; cmake -DCMAKE_INSTALL_PREFIX:PATH=" + prefixDir + " ..",
        "cd build; make " + make_jobs,
        "cd build; make install"
    ],
    compileWindows = [
        "cd build; cmake -G \"MSYS Makefiles\" -DCMAKE_INSTALL_PREFIX:PATH=" + prefixDir + " ..",
        "cd build; make " + make_jobs,
        "cd build; make install"
    ]
)

# Get and compile OpenAL Soft binaries (Windows)
GetDependency(
    "openal-soft-1.16.0-bin",
    downloadWindows = [
        "curl -sLO http://kcat.strangesoft.net/openal-soft-1.16.0-bin.zip",
        "unzip -o openal-soft-1.16.0-bin.zip"
    ]
)


# Get and compile SDL2
GetDependency(
    "SDL2-2.0.3",
    download = [
        "curl -sLO https://www.libsdl.org/release/SDL2-2.0.3.tar.gz",
        "tar xf SDL2-2.0.3.tar.gz"
    ],
    compileLinux = [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./autogen.sh",
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./autogen.sh",
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# Get and compile zlib (needed by libpng, needed by SDL2_image)
GetDependency(
    "zlib-1.2.8",
    download = [
        "curl -sLO http://zlib.net/zlib-1.2.8.tar.gz",
        "tar xf zlib-1.2.8.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    #compileWindows64 = [
    #    "./configure "
    #    + "--build=x86_64-w64-mingw32 "
    #    + "--host=x86_64-w64-mingw32 "
    #    #+ "--target=x86_64-w64-mingw32 "
    #    + "--prefix=" + prefixDir,
    #    "make " + make_jobs,
    #    "make install"
    #]
    compileWindows = [
        "make "
        + "-f win32/Makefile.gcc "
        + "BINARY_PATH=" + prefixDir + "/bin "
        + "INCLUDE_PATH=" + prefixDir + "/include "
        + "LIBRARY_PATH=" + prefixDir + "/lib "
        + "install",
        "cp zlib1.dll " + prefixDir + "/bin"
    ]
)

# Get and compile libpng (needed by SDL2_image)
GetDependency(
    "libpng-1.6.18",
    download = [
        #"curl -sLO http://download.sourceforge.net/libpng/libpng-1.2.52.tar.gz",
        #"tar xf libpng-1.2.52.tar.gz"
        "curl -sLO ftp://ftp.simplesystems.org/pub/libpng/png/src/libpng16/libpng-1.6.18.tar.gz",
        "tar xf libpng-1.6.18.tar.gz"
    ],
    compileLinux = [
        "CPPFLAGS=\"-I" + prefixDir + "/include\" "
        + "LDFLAGS=\"-L" + prefixDir + "/lib\" "
        + "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile libjpeg (needed by SDL2_image)
GetDependency(
    "jpeg-9a",
    download = [
        "curl -sLO http://www.ijg.org/files/jpegsrc.v9a.tar.gz",
        "tar xf jpegsrc.v9a.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile libtiff (needed by SDL2_image)
GetDependency(
    "tiff-4.0.6",
    download = [
        "curl -sLO ftp://ftp.remotesensing.org/pub/libtiff/tiff-4.0.6.tar.gz",
        "tar xf tiff-4.0.6.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile SDL2_image
GetDependency(
    "SDL2_image-2.0.0",
    download = [
        "curl -sLO https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.0.tar.gz",
        "tar xf SDL2_image-2.0.0.tar.gz"
    ],
    compileLinux = [
        "./autogen.sh",
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "CFLAGS=\"-I" + prefixDir + "/include\" "
        + "C_INCLUDE_PATH=\"" + prefixDir + "/include\" "
        + "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./autogen.sh",
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "CFLAGS=\"-I" + prefixDir + "/include\" "
        + "C_INCLUDE_PATH=\"" + prefixDir + "/include\" "
        + "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./autogen.sh",
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "CFLAGS=\"-I" + prefixDir + "/include\" "
        + "C_INCLUDE_PATH=\"" + prefixDir + "/include\" "
        + "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# Get and compile PCRE (needed by SWIG)
GetDependency(
    "pcre-8.37",
    download = [
        "curl -sLO ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.37.tar.gz",
        "tar xf pcre-8.37.tar.gz"
    ],
    compileLinux = [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile SWIG
GetDependency(
    "swig-3.0.7",
    #git = "https://github.com/swig/swig.git",
    download = [
        "curl -sLO http://prdownloads.sourceforge.net/swig/swig-3.0.7.tar.gz",
        "tar xf swig-3.0.7.tar.gz"
    ],
    compileLinux = [
        "./autogen.sh",
        "./configure "
        + "--with-pcre-prefix=" + prefixDir + " "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows64 = [
        "./autogen.sh",
        "./configure "
        + "--build=x86_64-w64-mingw32 "
        + "--host=x86_64-w64-mingw32 "
        #+ "--target=x86_64-w64-mingw32 "
        + "--with-pcre-prefix=" + prefixDir + " "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    compileWindows32 = [
        "./autogen.sh",
        "./configure "
        + "--build=i686-w64-mingw32 "
        + "--host=i686-w64-mingw32 "
        #+ "--target=i686-w64-mingw32 "
        + "--with-pcre-prefix=" + prefixDir + " "
        + "--prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# Get Qt
GetDependency(
    "Qt",
    downloadLinux = [
        "curl -sLO http://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run",
        "chmod a+x qt-unified-linux-x64-online.run",
        "mkdir Qt",
        "mv qt-unified-linux-x64-online.run Qt"
    ],
    downloadWindows = [
        "curl -sLO http://download.qt.io/official_releases/online_installers/qt-unified-windows-x86-online.exe",
        "mkdir Qt",
        "mv qt-unified-windows-x86-online.exe Qt"
    ],
    compileLinux = [
        "./qt-unified-linux-x64-online.run; exit 0"
    ],
    compileWindows = [
        "./qt-unified-windows-x86-online.exe; exit 0"
    ]
)
