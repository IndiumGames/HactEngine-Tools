#!/usr/bin/env python

# Update tools

import argparse
#import re
import os
import platform
import subprocess
import sys


print "System info:"
print os.name
print platform.system()
print platform.linux_distribution()[0]
print


if os.name != "posix":
    sys.exit("! Non-POSIX system not supported (Windows?)")
elif platform.system() != "Linux":
    sys.exit("! Non-Linux system not supported (OS X?)")


# Available arguments
parser = argparse.ArgumentParser("update-tools")
parser.add_argument(
    "--no-compile",
    action="store_true",
    help="Only download, do not install tools"
)

# Parse arguments
args = parser.parse_args()


# The directory containing this script
scriptDir = os.path.dirname(os.path.realpath(__file__))

# The directory to use as the temporary directory
tempDir = scriptDir + "/temp"

# Create temp directory if it doesn't exist
if not os.path.exists(tempDir):
    os.makedirs(tempDir)

os.chdir(tempDir)

# The prefix directory
prefixDir = tempDir + "/_prefix"

# Create prefix directory if it doesn't exist
if not os.path.exists(prefixDir):
    os.makedirs(prefixDir)


#!
#! Do a shallow Git clone.
#!
#! :param url:        URL to clone from.
#! :param directory:  Directory to clone into (relative to temp dir).
#!
def GitShallowClone(url, directory):
    # Get GNU Readline
    output = subprocess.check_output(
        "git clone --depth=1 --branch=master " + url + " " + directory,
        cwd = tempDir,
        stderr = subprocess.STDOUT,
        shell = True
    )
    
    return output


#!
#! Get dependency.
#!
def GetDependency(directory, gitUrl, compileCommands, downloadCommands = None):
    if os.path.exists(tempDir + "/" + directory):
        print "### Skipping " + directory + " because directory exists: temp/" + directory
    else:
        print("### Clone " + directory)
        
        if gitUrl != "":
            # Get GNU Readline
            GitShallowClone(gitUrl, directory)
        
        if downloadCommands:
            print("    ### Download " + directory)
            
            for downloadCommand in downloadCommands:
                output = subprocess.check_output(
                    downloadCommand,
                    cwd = tempDir,
                    shell = True
                )
                #print output
        
        if not args.no_compile:
            print("    ### Compile " + directory)
            
            for compileCommand in compileCommands:
                print("        ### Running compile command: " + compileCommand)
                
                output = subprocess.check_output(
                    compileCommand,
                    cwd = tempDir + "/" + directory,
                    shell = True
                )
                #print output
    
    print


# Get and compile GNU Readline (for Lua)
GetDependency(
    "readline",
    "git://git.savannah.gnu.org/readline.git",
    [
        "./configure",
        "make"
    ]
)

# Get and compile Lua
GetDependency(
    "lua",
    "https://github.com/lua/lua.git",
    [
        "cd src; make all SYSCFLAGS=\"-DLUA_USE_LINUX\" CFLAGS=\"-I../..\" SYSLIBS=\"-Wl,-E -ldl -L../../readline -lreadline\""
    ]
)


# Get GLM
GetDependency(
    "GLM",
    "https://github.com/g-truc/glm.git",
    [
        # No compile necessary, this is a header only library
    ]
)


# Get and compile Luacheck
GetDependency(
    "luacheck",
    "https://github.com/mpeterv/luacheck.git",
    [
        "../lua/src/lua install.lua " + prefixDir
    ]
)


# SWIG is difficult to compile without installing some dependencies
if platform.linux_distribution()[0] == "Ubuntu":
    print "Install these dependencies:"
    print "sudo apt-get install build-essential libtool libpcre3-dev perl-byacc"
    print "sudo apt-get install yodl"
    print

# Get and compile PCRE (for SWIG)
#GetDependency(
#    "pcre",
#    "https://gitlab.com/tortoisegit/pcre.git",
#    [
#        "./autogen.sh",
#        "./configure",
#        "make"
#    ]
#)

# Get and compile SWIG
GetDependency(
    "SWIG",
    "https://github.com/swig/swig.git",
    [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make",
        "make install"
    ]
)


# These are not something I want to even try to compile myself...
if platform.linux_distribution()[0] == "Ubuntu":
    print "Install these dependencies:"
    print "sudo apt-get install libgles2-mesa-dev"
    print "sudo apt-get install libdbus-1-dev libibus-1.0-dev"
    print

# Get and compile SDL2
GetDependency(
    "SDL2",
    "https://github.com/spurious/SDL-mirror.git",
    [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make",
        "make install"
    ]
)


# Get and compile SDL2_image
GetDependency(
    "SDL2_image",
    "",
    [
        "./autogen.sh",
        "PATH=\"$PATH:../_prefix/bin\" ./configure --prefix=" + prefixDir,
        "make",
        "make install"
    ],
    [
        "curl -sLO https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.0.tar.gz",
        "tar xf SDL2_image-2.0.0.tar.gz",
        "mv SDL2_image-2.0.0 SDL2_image"
    ]
)

