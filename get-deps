#!/usr/bin/env python

#
# Get and compile dependencies for HactEngine.
#
# This script will download and compile most of the dependencies needed for
# HactEngine's development. It even downloads the Qt installer for you.
#
# Some of the dependencies are "header only" or otherwise do not require
# installing, but they are downloaded as well.
#
# There are some tools which HactEngine does not directly depend on, but are
# required to compile the engine's dependencies. If these are small and simple
# to compile (like GNU Readline), they are downloaded and compiled as well.
#


import argparse
import multiprocessing
import os
import platform
#import re
import subprocess
import sys

print("System info")
print("===========")
print("OS name:            " + os.name)
print("Platform:           " + platform.system())
print("Linux distribution: " + platform.linux_distribution()[0])
print("CPU cores:          " + str(multiprocessing.cpu_count()))
print("")


if platform.system() == "Linux":
    print("Linux detected!")
elif platform.system() == "OS X":
    sys.exit("! OS X not supported")
elif platform.system() == "Windows":
    print("Windows detected!")
    #sys.exit("! Windows not supported")
else:
    sys.exit("! Unsupported system!")


# Available arguments
parser = argparse.ArgumentParser("update-tools")
parser.add_argument(
    "--no-compile",
    action="store_true",
    help="Only download, do not install tools"
)

# Parse arguments
args = parser.parse_args()


# Amount of jobs to use when building
make_jobs = "-j" + str(multiprocessing.cpu_count())

# The directory containing this script
scriptDir = os.path.dirname(os.path.realpath(__file__))


# The directory to use as the temporary directory
tempDir = scriptDir + "/temp"

# Create temp directory if it doesn't exist
if not os.path.exists(tempDir):
    os.makedirs(tempDir)


# The prefix directory
prefixDir = scriptDir + "/prefix"

# Create prefix directory if it doesn't exist
if not os.path.exists(prefixDir):
    os.makedirs(prefixDir)


#!
#! Do a shallow Git clone.
#!
#! :param url:        URL to clone from.
#! :param directory:  Directory to clone into (relative to temp dir).
#!
def GitShallowClone(url, directory):
    command = "git clone --depth=1 --branch=master " + url + " " + directory
    
    print("        ### Running download command: " + command)
    
    # Get GNU Readline
    output = subprocess.check_output(
        command,
        cwd = tempDir,
        stderr = subprocess.STDOUT,
        shell = True
    )
    
    return output


#!
#! Get dependency.
#!
def GetDependency(directory, gitUrl, compileCommands, downloadCommands = None):
    if os.path.exists(tempDir + "/" + directory):
        print("### Skipping " + directory + " because directory exists: temp/" + directory)
    else:
        print("### " + directory)
        
        print("    ### Download " + directory)
        
        if gitUrl != "":
            # Get GNU Readline
            GitShallowClone(gitUrl, directory)
        elif downloadCommands:
            for downloadCommand in downloadCommands:
                print("        ### Running download command: " + downloadCommand)
                
                output = subprocess.check_output(
                    downloadCommand,
                    cwd = tempDir,
                    shell = True
                )
                #print output
        
        if not args.no_compile:
            print("    ### Compile " + directory)
            
            for compileCommand in compileCommands:
                print("        ### Running compile command: " + compileCommand)
                
                output = subprocess.check_output(
                    compileCommand,
                    cwd = tempDir + "/" + directory,
                    shell = True
                )
                #print output
    
    print("")


# Get and compile Termcap (needed by GNU Readline, needed by Lua)
GetDependency(
    "termcap",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://ftp.gnu.org/gnu/termcap/termcap-1.3.1.tar.gz",
        "tar xf termcap-1.3.1.tar.gz",
        "mv termcap-1.3.1 termcap"
    ]
)

# Get and compile GNU Readline (for Lua)
GetDependency(
    "readline",
    "git://git.savannah.gnu.org/readline.git",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile Lua (with Readline)
GetDependency(
    "lua",
    "",
    [
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "LIBRARY_PATH=\"$LIBRARY_PATH:" + prefixDir + "/lib/\" "
        + "LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:" + prefixDir + "/lib\" "
        + "C_INCLUDE_PATH=\"$C_INCLUDE_PATH:" + prefixDir + "/include\" "
        + "make " + make_jobs + " linux MYLIBS=-ltermcap",
        "make install INSTALL_TOP=\"" + prefixDir + "\""
    ],
    [
        "curl -sLO http://www.lua.org/ftp/lua-5.3.1.tar.gz",
        "tar xf lua-5.3.1.tar.gz",
        "mv lua-5.3.1 lua"
    ]
)


# Get and compile Luacheck
GetDependency(
    "luacheck",
    "https://github.com/mpeterv/luacheck.git",
    [
        "PATH=\"$PATH:" + prefixDir + "/bin\" ./install.lua " + prefixDir
    ]
)


# Get GLM
GetDependency(
    "GLM",
    "https://github.com/g-truc/glm.git",
    [
        # No compile necessary, this is a header only library
    ]
)


# Get rapidxml
GetDependency(
    "rapidxml",
    "",
    [],
    [
        "curl -sLO http://downloads.sourceforge.net/project/rapidxml/rapidxml/rapidxml%201.13/rapidxml-1.13.zip",
        "unzip -o rapidxml-1.13.zip",
        "mv rapidxml-1.13 rapidxml"
    ]
)


# Get utf8cpp
GetDependency(
    "utf8cpp",
    "",
    [],
    [
        "curl -sLO http://downloads.sourceforge.net/project/utfcpp/utf8cpp_2x/Release%202.3.4/utf8_v2_3_4.zip",
        "unzip -o utf8_v2_3_4.zip -d utf8cpp"
    ]
)


# Get and compile libogg
GetDependency(
    "libogg",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gz",
        "tar xf libogg-1.3.2.tar.gz",
        "mv libogg-1.3.2 libogg"
    ]
)

# Get and compile libvorbis
GetDependency(
    "libvorbis",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.5.tar.gz",
        "tar xf libvorbis-1.3.5.tar.gz",
        "mv libvorbis-1.3.5 libvorbis"
    ]
)


if platform.linux_distribution()[0] == "Ubuntu":
    print("Install these dependencies:")
    print("sudo apt-get install cmake")
    print("")

# Get and compile OpenAL Soft
GetDependency(
    "openal-soft",
    "http://repo.or.cz/openal-soft.git",
    [
        "cd build; cmake -DCMAKE_INSTALL_PREFIX:PATH=" + prefixDir + " ..",
        "cd build; make " + make_jobs,
        "cd build; make install"
    ]
)


# Get and compile OpenAL Soft
GetDependency(
    "freetype2",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://download.savannah.gnu.org/releases/freetype/freetype-2.6.tar.gz",
        "tar xf freetype-2.6.tar.gz",
        "mv freetype-2.6 freetype2"
    ]
)


# SWIG is difficult to compile without installing some dependencies
if platform.linux_distribution()[0] == "Ubuntu":
    print("Install these dependencies:")
    print("sudo apt-get install build-essential libtool libpcre3-dev perl-byacc")
    print("sudo apt-get install yodl")
    print("")

# Get and compile PCRE (for SWIG)
#GetDependency(
#    "pcre",
#    "https://gitlab.com/tortoisegit/pcre.git",
#    [
#        "./autogen.sh",
#        "./configure",
#        "make"
#    ]
#)

# Get and compile SWIG
GetDependency(
    "SWIG",
    "https://github.com/swig/swig.git",
    [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# These are not something I want to even try to compile myself...
if platform.linux_distribution()[0] == "Ubuntu":
    print("Install these dependencies:")
    print("sudo apt-get install libtool")
    print("sudo apt-get install libgles2-mesa-dev")
    print("#sudo apt-get install libgle3-dev")
    print("#sudo apt-get install libdbus-1-dev libibus-1.0-dev")
    print("")

# Get and compile SDL2
GetDependency(
    "SDL2",
    "",
    [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO https://www.libsdl.org/release/SDL2-2.0.3.tar.gz",
        "tar xf SDL2-2.0.3.tar.gz",
        "mv SDL2-2.0.3 SDL2"
    ]
)


# Get and compile zlib (needed by libpng, needed by SDL2_image)
GetDependency(
    "zlib",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://zlib.net/zlib-1.2.8.tar.gz",
        "tar xf zlib-1.2.8.tar.gz",
        "mv zlib-1.2.8 zlib"
    ]
)

# Get and compile libpng (needed by SDL2_image)
GetDependency(
    "libpng",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://download.sourceforge.net/libpng/libpng-1.2.52.tar.gz",
        "tar xf libpng-1.2.52.tar.gz",
        "mv libpng-1.2.52 libpng"
    ]
)

# Get and compile libjpeg (needed by SDL2_image)
GetDependency(
    "libjpeg",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://www.ijg.org/files/jpegsrc.v9a.tar.gz",
        "tar xf jpegsrc.v9a.tar.gz",
        "mv jpeg-9a libjpeg"
    ]
)

# Get and compile libtiff (needed by SDL2_image)
GetDependency(
    "libtiff",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO ftp://ftp.remotesensing.org/pub/libtiff/tiff-4.0.6.tar.gz",
        "tar xf tiff-4.0.6.tar.gz",
        "mv tiff-4.0.6 libtiff"
    ]
)

# These are not something I want to even try to compile myself...
if platform.linux_distribution()[0] == "Ubuntu":
    print("Install these dependencies:")
    print("sudo apt-get install libtool")
    print("")

# Get and compile SDL2_image
GetDependency(
    "SDL2_image",
    "",
    [
        "./autogen.sh",
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "CFLAGS=\"-I" + prefixDir + "/include\" "
        + "C_INCLUDE_PATH=\"" + prefixDir + "/include\" "
        + "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.0.tar.gz",
        "tar xf SDL2_image-2.0.0.tar.gz",
        "mv SDL2_image-2.0.0 SDL2_image"
    ]
)

# Get Qt
GetDependency(
    "Qt",
    "",
    [
        # Don't start installation automatically
        #./qt-installer.run
    ],
    [
        "curl -sLo qt-installer.run http://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run",
        "chmod a+x qt-installer.run",
        "touch Qt"
    ]
)

