#!/usr/bin/env python

# Update tools

import argparse
import multiprocessing
import os
import platform
#import re
import subprocess
import sys

print "System info"
print "==========="
print "OS name:            " + os.name
print "Platform:           " + platform.system()
print "Linux distribution: " + platform.linux_distribution()[0]
print "CPU cores:          " + str(multiprocessing.cpu_count())
print


if os.name != "posix":
    sys.exit("! Non-POSIX system not supported (Windows?)")
elif platform.system() != "Linux":
    sys.exit("! Non-Linux system not supported (OS X?)")


# Available arguments
parser = argparse.ArgumentParser("update-tools")
parser.add_argument(
    "--no-compile",
    action="store_true",
    help="Only download, do not install tools"
)

# Parse arguments
args = parser.parse_args()


# Amount of jobs to use when building
make_jobs = "-j" + str(multiprocessing.cpu_count())

# The directory containing this script
scriptDir = os.path.dirname(os.path.realpath(__file__))


# The directory to use as the temporary directory
tempDir = scriptDir + "/temp"

# Create temp directory if it doesn't exist
if not os.path.exists(tempDir):
    os.makedirs(tempDir)


# The prefix directory
prefixDir = scriptDir + "/prefix"

# Create prefix directory if it doesn't exist
if not os.path.exists(prefixDir):
    os.makedirs(prefixDir)


#!
#! Do a shallow Git clone.
#!
#! :param url:        URL to clone from.
#! :param directory:  Directory to clone into (relative to temp dir).
#!
def GitShallowClone(url, directory):
    command = "git clone --depth=1 --branch=master " + url + " " + directory
    
    print("        ### Running download command: " + command)
    
    # Get GNU Readline
    output = subprocess.check_output(
        command,
        cwd = tempDir,
        stderr = subprocess.STDOUT,
        shell = True
    )
    
    return output


#!
#! Get dependency.
#!
def GetDependency(directory, gitUrl, compileCommands, downloadCommands = None):
    if os.path.exists(tempDir + "/" + directory):
        print "### Skipping " + directory + " because directory exists: temp/" + directory
    else:
        print("### " + directory)
        
        print("    ### Download " + directory)
        
        if gitUrl != "":
            # Get GNU Readline
            GitShallowClone(gitUrl, directory)
        elif downloadCommands:
            for downloadCommand in downloadCommands:
                print("        ### Running download command: " + downloadCommand)
                
                output = subprocess.check_output(
                    downloadCommand,
                    cwd = tempDir,
                    shell = True
                )
                #print output
        
        if not args.no_compile:
            print("    ### Compile " + directory)
            
            for compileCommand in compileCommands:
                print("        ### Running compile command: " + compileCommand)
                
                output = subprocess.check_output(
                    compileCommand,
                    cwd = tempDir + "/" + directory,
                    shell = True
                )
                #print output
    
    print


# Get and compile Termcap (needed by GNU Readline, needed by Lua)
GetDependency(
    "termcap",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://ftp.gnu.org/gnu/termcap/termcap-1.3.1.tar.gz",
        "tar xf termcap-1.3.1.tar.gz",
        "mv termcap-1.3.1 termcap"
    ]
)

# Get and compile GNU Readline (for Lua)
GetDependency(
    "readline",
    "git://git.savannah.gnu.org/readline.git",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)

# Get and compile ncurses (needed by readline, needed by Lua)
GetDependency(
    "ncurses",
    "",
    [
        #"./configure --with-shared --prefix=" + prefixDir,
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://ftp.gnu.org/gnu/ncurses/ncurses-6.0.tar.gz",
        "tar xf ncurses-6.0.tar.gz",
        "mv ncurses-6.0 ncurses"
    ]
)

# Get and compile libedit (needed by Lua)
GetDependency(
    "libedit",
    "",
    [
        "LDFLAGS=\"-L" + prefixDir + "/lib/\" "
        + "./configure --enable-shared=no --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
        #,
        #"ln -s " + prefixDir + "/include/editline " + prefixDir + "/include/readline",
        #"ln -s " + prefixDir + "/include/histedit.h " + prefixDir + "/include/readline/history.h",
        #"ln -s " + prefixDir + "/lib/libedit.a " + prefixDir + "/lib/libreadline.a"
    ],
    [
        "curl -sLO http://thrysoee.dk/editline/libedit-20150325-3.1.tar.gz",
        "tar xf libedit-20150325-3.1.tar.gz",
        "mv libedit-20150325-3.1 libedit"
    ]
)

# Get and compile Lua (with Readline)
GetDependency(
    "lua-readline",
    "",
    [
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "LIBRARY_PATH=\"$LIBRARY_PATH:" + prefixDir + "/lib/\" "
        + "LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH:" + prefixDir + "/lib\" "
        + "C_INCLUDE_PATH=\"$C_INCLUDE_PATH:" + prefixDir + "/include\" "
        + "make " + make_jobs + " linux MYLIBS=-ltermcap",
        "make install INSTALL_TOP=\"" + prefixDir + "\""
    ],
    [
        "curl -sLO http://www.lua.org/ftp/lua-5.3.1.tar.gz",
        "tar xf lua-5.3.1.tar.gz",
        "mv lua-5.3.1 lua-readline"
    ]
)

# Get and compile Lua
GetDependency(
    "lua",
    "",
    [
        "cd src; "
        + "make " + make_jobs + " all "
        + "SYSCFLAGS=\"-DLUA_USE_POSIX -DLUA_USE_DLOPEN\" "
        + "CFLAGS=\"-I" + prefixDir + "/include\" "
        + "SYSLIBS=\"-Wl,-E -ldl\""
        #,
        #"cp src/liblua.a " + prefixDir + "/lib"
    ],
    [
        "curl -sLO http://www.lua.org/ftp/lua-5.3.1.tar.gz",
        "tar xf lua-5.3.1.tar.gz",
        "mv lua-5.3.1 lua"
    ]
)

# Get and compile Lua
#GetDependency(
#    "lua",
#    "",
#    [
#        "cd src; "
#        + "make " + make_jobs + " all "
#        + "SYSCFLAGS=\"-DLUA_USE_LINUX\" "
#        + "CFLAGS=\"-I" + prefixDir + "/include\" "
#        + "SYSLIBS=\"-Wl,-E -ldl\"",
#        "make install INSTALL_TOP=\"" + prefixDir + "\""
#    ],
#    [
#        "curl -sLO http://www.lua.org/ftp/lua-5.3.1.tar.gz",
#        "tar xf lua-5.3.1.tar.gz",
#        "mv lua-5.3.1 lua"
#    ]
#)


# Get and compile Luacheck
GetDependency(
    "luacheck",
    "https://github.com/mpeterv/luacheck.git",
    [
        "PATH=\"$PATH:" + prefixDir + "/bin\" ./install.lua " + prefixDir
    ]
)


# Get GLM
GetDependency(
    "GLM",
    "https://github.com/g-truc/glm.git",
    [
        # No compile necessary, this is a header only library
    ]
)


# SWIG is difficult to compile without installing some dependencies
if platform.linux_distribution()[0] == "Ubuntu":
    print "Install these dependencies:"
    print "sudo apt-get install build-essential libtool libpcre3-dev perl-byacc"
    print "sudo apt-get install yodl"
    print

# Get and compile PCRE (for SWIG)
#GetDependency(
#    "pcre",
#    "https://gitlab.com/tortoisegit/pcre.git",
#    [
#        "./autogen.sh",
#        "./configure",
#        "make"
#    ]
#)

# Get and compile SWIG
GetDependency(
    "SWIG",
    "https://github.com/swig/swig.git",
    [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ]
)


# These are not something I want to even try to compile myself...
if platform.linux_distribution()[0] == "Ubuntu":
    print "Install these dependencies:"
    print "sudo apt-get install libtool"
    print "sudo apt-get install libgles2-mesa-dev"
    print "#sudo apt-get install libgle3-dev"
    print "#sudo apt-get install libdbus-1-dev libibus-1.0-dev"
    print

# Get and compile SDL2
GetDependency(
    "SDL2",
    "",
    [
        "./autogen.sh",
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO https://www.libsdl.org/release/SDL2-2.0.3.tar.gz",
        "tar xf SDL2-2.0.3.tar.gz",
        "mv SDL2-2.0.3 SDL2"
    ]
)


# Get and compile zlib (needed by libpng, needed by SDL2_image)
GetDependency(
    "zlib",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://zlib.net/zlib-1.2.8.tar.gz",
        "tar xf zlib-1.2.8.tar.gz",
        "mv zlib-1.2.8 zlib"
    ]
)

# Get and compile libpng (needed by SDL2_image)
GetDependency(
    "libpng",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://download.sourceforge.net/libpng/libpng-1.2.52.tar.gz",
        "tar xf libpng-1.2.52.tar.gz",
        "mv libpng-1.2.52 libpng"
    ]
)

# Get and compile libjpeg (needed by SDL2_image)
GetDependency(
    "libjpeg",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO http://www.ijg.org/files/jpegsrc.v9a.tar.gz",
        "tar xf jpegsrc.v9a.tar.gz",
        "mv jpeg-9a libjpeg"
    ]
)

# Get and compile libtiff (needed by SDL2_image)
GetDependency(
    "libtiff",
    "",
    [
        "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO ftp://ftp.remotesensing.org/pub/libtiff/tiff-4.0.6.tar.gz",
        "tar xf tiff-4.0.6.tar.gz",
        "mv tiff-4.0.6 libtiff"
    ]
)

# These are not something I want to even try to compile myself...
if platform.linux_distribution()[0] == "Ubuntu":
    print "Install these dependencies:"
    print "sudo apt-get install libtool"
    print

# Get and compile SDL2_image
GetDependency(
    "SDL2_image",
    "",
    [
        "./autogen.sh",
        "PATH=\"$PATH:" + prefixDir + "/bin\" "
        + "CFLAGS=\"-I" + prefixDir + "/include\" "
        + "C_INCLUDE_PATH=\"" + prefixDir + "/include\" "
        + "./configure --prefix=" + prefixDir,
        "make " + make_jobs,
        "make install"
    ],
    [
        "curl -sLO https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.0.tar.gz",
        "tar xf SDL2_image-2.0.0.tar.gz",
        "mv SDL2_image-2.0.0 SDL2_image"
    ]
)

# Get Qt
GetDependency(
    "Qt",
    "",
    [
        # Don't start installation automatically
        #./qt-installer.run
    ],
    [
        "curl -sLo qt-installer.run http://download.qt.io/official_releases/online_installers/qt-unified-linux-x64-online.run",
        "chmod a+x qt-installer.run"
    ]
)

