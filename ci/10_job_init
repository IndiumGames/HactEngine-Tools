#!/usr/bin/env python

"""
Initialize and display information about the job and environment.
"""

import os
import subprocess
import sys


print("")
print("[INIT]")
print("")

print(os.getcwd())
print("")


# Get current Git branch name
branch = None
try:
    branch = subprocess.check_output(
        "git rev-parse --abbrev-ref HEAD",
        stderr = open(os.devnull, 'w'),
        shell = True
    )
    branch = branch.decode().rstrip()
except subprocess.CalledProcessError as e:
    print(e.message)
    raise

if branch == "HEAD":
    print("DETACHED HEAD!")
    print("Looking for branches containing the commit")
    
    branchesWithCommit = subprocess.check_output(
        "git branch --no-color --contains HEAD",
        stderr = open(os.devnull, 'w'),
        shell = True
    )
    
    for branchWithCommit in branchesWithCommit.splitlines():
        branchWithCommit = str(branchWithCommit)
        print("branchWithCommit: " + branchWithCommit)
        if "HEAD detached" not in branchWithCommit:
            branch = branchWithCommit.strip()
            break
    
    print("Found branch: " + branch)
    
    subprocess.check_output(
        "git checkout " + branch,
        stderr = open(os.devnull, 'w'),
        shell = True
    )
    
    #sys.exit("DETACHED HEAD!")

# Get currect Git commit tag
tag = None
try:
    tag = subprocess.check_output(
        "git describe --exact-match",
        stderr = open(os.devnull, 'w'),
        shell = True
    )
    tag = tag.decode().rstrip()
except subprocess.CalledProcessError as e:
    # Return code 128 means that there was no tag, which is fine
    if e.returncode is 128:
        pass
    else:
        print(e.message)
        raise


print("Branch: " + str(branch))
print("Tag:    " + str(tag))


if branch == "HEAD":
    try:
        subprocess.check_output(
            "git submodule update --init --remote --recursive",
            stderr = open(os.devnull, 'w'),
            shell = True
        )
    except subprocess.CalledProcessError as e:
        print(e.message)
        raise
else:
    # Checkout the current branch in submodules
    subprocess.check_output(
        "git submodule foreach --recursive "
        + "'(git checkout " + branch + " || git checkout master); git pull'",
        stderr = open(os.devnull, 'w'),
        shell = True
    )

print("")
print("")

print("[COMMIT MESSAGE]")
print(
    subprocess.check_output(
        ["git", "log", "--format=%B", "-n", "1", "HEAD"]
    )
)

print("[VERSION INFO]")
try:
    subprocess.call(
        "g++ --version",
        shell = True
    )
except OSError:
    pass

try:
    subprocess.call(
        "lua -v",
        shell = True
    )
except OSError:
    pass

try:
    subprocess.call(
        "swig -version",
        shell = True
    )
except OSError:
    pass

print("")

try:
    subprocess.call(
        "qmake --version",
        shell = True
    )
except OSError:
    pass

print("")
